// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var beatmap = Beatmap.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public class Beatmap_data
    {
        [JsonProperty("metadata")]
        public Metadata Metadata { get; set; }

        [JsonProperty("stats")]
        public Stats Stats { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("deletedAt")]
        public string DeletedAt { get; set; }

        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("uploader")]
        public Uploader Uploader { get; set; }

        [JsonProperty("hash")]
        public string Hash { get; set; }

        [JsonProperty("uploaded")]
        public string Uploaded { get; set; }

        [JsonProperty("directDownload")]
        public string DirectDownload { get; set; }

        [JsonProperty("downloadURL")]
        public string DownloadUrl { get; set; }

        [JsonProperty("coverURL")]
        public string CoverUrl { get; set; }
    }

    public class Metadata
    {
        [JsonProperty("difficulties")]
        public MetadataDifficulties Difficulties { get; set; }

        [JsonProperty("duration")]
        public long Duration { get; set; }

        [JsonProperty("automapper")]
        public string Automapper { get; set; }

        [JsonProperty("characteristics")]
        public Characteristic[] Characteristics { get; set; }

        [JsonProperty("levelAuthorName")]
        public string LevelAuthorName { get; set; }

        [JsonProperty("songAuthorName")]
        public string SongAuthorName { get; set; }

        [JsonProperty("songName")]
        public string SongName { get; set; }

        [JsonProperty("songSubName")]
        public string SongSubName { get; set; }

        [JsonProperty("bpm")]
        public float Bpm { get; set; }
    }

    public class Characteristic
    {
        [JsonProperty("difficulties")]
        public CharacteristicDifficulties Difficulties { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public class CharacteristicDifficulties
    {
        [JsonProperty("easy")]
        public Difficulty Easy { get; set; }

        [JsonProperty("expert")]
        public Difficulty Expert { get; set; }

        [JsonProperty("expertPlus")]
        public Difficulty ExpertPlus { get; set; }

        [JsonProperty("hard")]
        public Difficulty Hard { get; set; }

        [JsonProperty("normal")]
        public Difficulty Normal { get; set; }
    }

    public class Difficulty
    {
        [JsonProperty("duration")]
        public float Duration { get; set; }

        [JsonProperty("length")]
        public long Length { get; set; }

        [JsonProperty("njs")]
        public float Njs { get; set; }

        [JsonProperty("njsOffset")]
        public float NjsOffset { get; set; }

        [JsonProperty("bombs")]
        public int Bombs { get; set; }

        [JsonProperty("notes")]
        public int Notes { get; set; }

        [JsonProperty("obstacles")]
        public int Obstacles { get; set; }
    }

    public class MetadataDifficulties
    {
        [JsonProperty("easy")]
        public bool Easy { get; set; }

        [JsonProperty("expert")]
        public bool Expert { get; set; }

        [JsonProperty("expertPlus")]
        public bool ExpertPlus { get; set; }

        [JsonProperty("hard")]
        public bool Hard { get; set; }

        [JsonProperty("normal")]
        public bool Normal { get; set; }
    }

    public class Stats
    {
        [JsonProperty("downloads")]
        public int Downloads { get; set; }

        [JsonProperty("plays")]
        public int Plays { get; set; }

        [JsonProperty("downVotes")]
        public int DownVotes { get; set; }

        [JsonProperty("upVotes")]
        public int UpVotes { get; set; }

        [JsonProperty("heat")]
        public float Heat { get; set; }

        [JsonProperty("rating")]
        public float Rating { get; set; }
    }

    public class Uploader
    {
        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("username")]
        public string Username { get; set; }
    }

    public class Beatmap
    {
        public static Beatmap FromJson(string json) => JsonConvert.DeserializeObject<Beatmap>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Beatmap self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
